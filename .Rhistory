}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
library(tidyverse)
library(magrittr)
library(epinionDSB)
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is.na(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
?is_missing
library(rlang)
library(rlang)
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
?is.wave
?is.waive
??is.waive
install.packages("lemon")
library(lemon)
library(lemon)
?is.waive
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !lemon::is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
library(lemon)
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !lemon::is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && lemon::!is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && lemon::!is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
library(tidyverse)
library(magrittr)
library(epinionDSB)
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
manual_scale <- function(aesthetic, values = "my_pal", breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
rm(my_pal, pal, colour_dsb_d, manual_scale)
devtools::document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
mtcars
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb3))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "eight")
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main")
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main")
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, pal = "my_pal", breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
#colour_dsb_d()
#tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
my_pal
