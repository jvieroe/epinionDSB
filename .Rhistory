} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && lemon::!is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
library(tidyverse)
library(magrittr)
library(epinionDSB)
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
manual_scale <- function(aesthetic, values = "my_pal", breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
rm(my_pal, pal, colour_dsb_d, manual_scale)
devtools::document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
mtcars
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb3))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "eight")
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main")
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main")
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, pal = "my_pal", breaks = waiver(), ..., limits = NULL) {
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
#colour_dsb_d()
#tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
my_pal
library(devtools)
library(usethis)
# ----- Create list with continuous color palettes
dsb_palettes <- list(
`reds` = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues` = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens` = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals` = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
#' Use a DSB styled color palette for your ggplot2 graphics
#'
#' This function extract DSB compliant colors (in HEX codes) by their name
#' @param ... takes as input the name of the color(s) needed
#' @return the corresponding HEX code
#' @author Jeppe VierÃ¸
#' @export
dsb_colvec <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dsb_cols)
dsb_cols[cols]
}
# ----- Create list with continuous color palettes
dsb_palettes <- list(
`reds` = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues` = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens` = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals` = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
getwd()
save(dsb_cols,
file = "data/dsb_cols.rda")
# usethis::use_data(dsb_cols,
#                   overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
# ----- Create list with continuous color palettes
dsb_palettes <- list(
`reds` = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues` = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens` = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals` = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Create list of lists with discrete color palettes
dsb_palettes_d <- list()
dsb_palettes_d$main <- list(
"DSB_Red" = "#B41730",
"DSB_DarkBlue" = "#00233C",
"DSB_Orange" = "#DF652C",
"DSB_DarkGreen" = "#144E36",
"DSB_Purple" = "#6E3C6E",
"DSB_Teal" = "#28767E",
"DSB_DarkGrey" = "#747474",
"DSB_LightBlue" = "#5382B6",
"DSB_LightGreen" = "#88C988",
"DSB_Turqoise" = "#41BDBF",
"DSB_Green" = "#1CA645",
"DSB_LightGrey" = "#A5A5A5"
)
# ----- Upload data to GitHub
getwd()
getwd()
save(dsb_palettes,
file = "data/dsb_palettes.rda")
save(dsb_palettes_d,
file = "data/dsb_palettes_d.rda")
document()
rm(dsb_colvec, dsb_cols, rgb_codes)
document()
document()
document()
document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes_d
mtcars
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb3))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
dsb_palettes_d
length(dsb_palettes_d)
tt <- dsb_palettes_d
View(tt)
tt <- dsb_palettes_d$main
length(dsb_palettes_d$main)
rm(mtcars2)
rm(tt)
document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes_d
mtcars
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb3))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
table(mtcars$cyl)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
#color_dsb_d(palette = "four")
colour_dsb_d()
mtcars
table(mtcars$cyl)
dsb_palettes
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 5) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "full", reverse = F)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 5) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main", reverse = F)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = disp)) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_c(reverse = F)
p1 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "two", reverse = F)
p1 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main", reverse = F)
p1 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = F)
p2 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = disp)) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = T)
grid.arrange(
p1, p2,
ncol = 1
)
library(gridExtra)
p1 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = F)
p2 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = disp)) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = T)
grid.arrange(
p1, p2,
ncol = 1
)
p2 <-
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = T)
grid.arrange(
p1, p2,
ncol = 1
)
?color_dsb_d
?discrete_scale
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "two", reverse = F)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 5) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main", reverse = F)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 5) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main", reverse = F,
guide = none)
rm(list = ls())
document()
