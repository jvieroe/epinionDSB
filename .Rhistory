geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "two")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "five")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "five")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "five")
pivot_longer()
library(tidyverse)
library(magrittr)
?tribble
document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
dsb_palettes$main
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
table(mtcars2$carb2)
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb3))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
# it only works with exact match of length of palette and number of categories
# should be able to just pick what it needs
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "eight")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "five")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
mtcars
table(mtcars$cyl)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
length(unique(mtcars2$carb))
color = factor(carb)) +
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
table(mtcars$cyl)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
?colorRampPalette
# Define color vector (in 4 different ways, see p4 above):
my_pal <- c("black", "orange",                         # R color names,
"#9ACD32",                                 # HEX codes, and
rgb( 70, 130, 180, maxColorValue = 255))   # RGB values
# Inspect colors:
my_pal
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
my_pal <- c("black", "orange", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
dsb_palettes
document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
mtcars
dsb_palettes$main
dsb_palettes[["main"]]
pal <- dsb_palettes[["main"]]
pal
document()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "four")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
#color_dsb_d(palette = "four")
colour_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
#color_dsb_d(palette = "four")
colour_dsb_d()
dsb_palettes[["main"]]
class(dsb_palettes[["main"]])
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
tempcol <- scale_color_manual(values = my_pal)
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol()
tempcol
scale_color_manual
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
tempcol <- function(palette = "my_pal",
reverse = FALSE) {
pal <- palette
if (reverse) pal <- rev(pal)
return(scale_color_manual(values = pal))
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol() +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
my_pal
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
tempcol() +
tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
#tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
library(devtools)
library(usethis)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
?manual_scale
??manual_scale
?scale_color_manual
my_pal <- c("black", "purple", "red", "blue", "yellow", "green")
# Inspect colors:
my_pal
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
scale_color_manual(values = my_pal) +
#tempcol() +
#tempcol +
labs(title = "Using a custom color palette in ggplot2") +
theme_classic()
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
colour_dsb_d <- function(...,
values = "my_pal",
aesthetics = "colour",
breaks = waiver(),
na.value = "grey50") {
manual_scale(aesthetics, values, breaks, ..., na.value = na.value)
}
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
# Use color palette (in ggplot):
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = factor(cyl)), size = 4, alpha = .5) +
#scale_color_manual(values = my_pal) +
colour_dsb_d()
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
manual_scale <- function(aesthetic, values = NULL, breaks = waiver(), ..., limits = NULL) {
# check for missing `values` parameter, in lieu of providing
# a default to all the different scale_*_manual() functions
if (is_missing(values)) {
values <- NULL
} else {
force(values)
}
if (is.null(limits) && !is.null(names(values))) {
# Limits as function to access `values` names later on (#4619)
limits <- function(x) intersect(x, names(values))
}
# order values according to breaks
if (is.vector(values) && is.null(names(values)) && !is.waive(breaks) &&
!is.null(breaks) && !is.function(breaks)) {
if (length(breaks) <= length(values)) {
names(values) <- breaks
} else {
names(values) <- breaks[1:length(values)]
}
}
pal <- function(n) {
if (n > length(values)) {
abort(glue("Insufficient values in manual scale. {n} needed but only {length(values)} provided."))
}
values
}
discrete_scale(aesthetic, "manual", pal, breaks = breaks, limits = limits, ...)
}
