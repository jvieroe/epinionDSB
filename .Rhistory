usethis::use_data(dsb_cols,
overwrite = TRUE)
library(devtools)
devtools::document()
dsb_palettes <- list(
`red`  = dsb_colvec("DSB_Red"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange",
"DSB_Turqoise", "DSB_DarkGrey",
"DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
usethis::use_data(dsb_palettes,
overwrite = TRUE)
document()
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
length(dsb_palettes$main)
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb))
table(mtcars$carb2)
length(unique(mtcars$carb2))
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "main")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = TRUE)
length(unique(mtcars$carb2))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(reverse = TRUE)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
table(mtcars$cyl)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
dsb_palettes
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
#dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
colour_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
dsb_palettes$main
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
length(unique(mtcars$carb))
length(unique(mtcars$carb2))
length(unique(mtcars$carb))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
rm(mtcars)
dsb_palettes <- list(
`one`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange", "DSB_Turqoise", "DSB_DarkGrey", "DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
#`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
#`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
usethis::use_data(dsb_palettes,
overwrite = TRUE)
#dsb_colvec()
document()
#' Extract HEX-codes and RGB-codes by color name
#'
#' This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats:
#' RGB and HEX.
#' The code provided here is for transparency purposes only, the resulting data is provided in the data folder (dsb_colors.rda)
#' @author Jeppe Vierø
#' @export
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
document()
dsb_cols
#' Extract HEX-codes and RGB-codes by color name
#'
#' This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats:
#' RGB and HEX.
#' The code provided here is for transparency purposes only, the resulting data is provided in the data folder (dsb_colors.rda)
#' @author Jeppe Vierø
#' @export
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
document()
#' Extract HEX-codes and RGB-codes by color name
#'
#' This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats:
#' RGB and HEX.
#' The code provided here is for transparency purposes only, the resulting data is provided in the data folder (dsb_colors.rda)
#' @author Jeppe Vierø
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
document()
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
library(devtools)
document()
dsb_palettes <- list(
`one`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange", "DSB_Turqoise", "DSB_DarkGrey", "DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
#`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
#`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
usethis::use_data(dsb_palettes,
overwrite = TRUE)
#dsb_colvec()
document()
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
document()
# ----- Upload data to GitHub
getwd()
library(usethis)
usethis::use_data(dsb_cols,
overwrite = TRUE)
document()
