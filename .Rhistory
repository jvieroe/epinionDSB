"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors_tibble$rgb
# ----- Get HEX codes, add to tibble
dsb_colors_tibble$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# ----- Upload data to GitHub
usethis::use_data(dsb_colors_tibble,
overwrite = TRUE)
devtools::document()
devtools::document()
#' Extract HEX-codes and RGB-codes by color name
#'
#' This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats:
#' RGB and HEX.
#' The code provided here is for transparency purposes only, the resulting data is provided in the data folder (dsb_colors.rda)
#' @author Jeppe VierÃ¸
#' @export
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# ----- Upload data to GitHub
usethis::use_data(dsb_colors,
overwrite = TRUE)
document()
# ----- Create named palette of HEX codes
dsb_cols <- dsb_colors %>%
select(
c(name,
hex_codes)
) %>%
tibble::deframe()
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
document()
dsb_cols
dsb_colvec <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dsb_cols)
dsb_cols[cols]
}
dsb_cols
dsb_colvec("DSB_Red")
dsb_colvec("DSB_Red", "DSB_Orange")
dsb_colvec(c("DSB_Red", "DSB_Orange"))
dsb_colvec("DSB_Red", "DSB_Orange")
dsb_colvec("DSB_Red" "DSB_Orange")
dsb_colvec("DSB_Red", "DSB_Orange")
dsb_colvec()
# DSB_Red and DSB_DarkBlue
dsb_colvec("DSB_Red", "DSB_DarkBlue")
document)
devtools::document()
library(tidyverse)
library(magrittr)
library(devtools)
library(usethis)
devtools::document()
devtools::document()
dsb_colvec()
dsb_colvec <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dsb_cols)
dsb_cols[cols]
}
# All DSB colors
dsb_colvec()
# DSB_Red only
dsb_colvec("DSB_Red")
# DSB_Red and DSB_DarkBlue
dsb_colvec("DSB_Red", "DSB_DarkBlue")
library(tidyverse)
library(epinionDSB)
---
output: github_document
---
<!-- README.md is generated from README.Rmd. Please edit that file -->
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "75%",
dpi = 300,
fig.align = "center"
)
#knitr::opts_chunk$set(fig.width=12, fig.height=8)
```
# epinionDSB
<!-- badges: start -->
<!-- badges: end -->
The goal of ```epinionDSB``` is to provide easy-to-use templates for visualizations using the ```ggplot2``` package
## Installation
You can install the development version from [GitHub](https://github.com/) with:
``` r
# install.packages("devtools")
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
```
## Readymade ```ggplot2``` style
The ```epinionDSB::dsb_style()``` function adds a tailormade theme to your ```ggplot2``` graphics. This allows for a coherent Corporate Visual Identity (CVI) for Epinion consultants working with DSB. Importantly, the ```dsb_style()``` function both
* serves as a time-saver when producing many visualizations, as compared to specifying ```ggplot2::theme()``` in each plot
* allows you to efficiently align visual styles and apply these across the board by altering the content of the ```dsb_style()``` function itself
### Example
```{r example, warning=F, message=F}
library(tidyverse)
library(epinionDSB)
```
The ```dsb_style()``` function does not impact the ```aes()``` of your ```geom_*()```, only the ```ggplot2::theme()```. The only argument taken by ```dsb_style``` (at the time of writing) is the ```legend``` option specifying whether a legend is included and defaulting to ```TRUE``` (with ```legend.position``` defaulting to ```"right"```)
```{r cars}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style()
```
Note that all ```ggplot2::theme()``` settings inherent in ```dsb_style()``` can be overwritten by adding ```theme()``` elements after ```dsb_style()```:
```{r cars2}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
```
<!-- You'll still need to render `README.Rmd` regularly, to keep `README.md` up-to-date. `devtools::build_readme()` is handy for this. You could also use GitHub Actions to re-render `README.Rmd` every time you push. An example workflow can be found here: <https://github.com/r-lib/actions/tree/master/examples>. -->
<!-- In that case, don't forget to commit and push the resulting figure files, so they display on GitHub and CRAN. -->
## Color palettes
```{r colvec1, warning=F, message=F}
# All DSB colors
dsb_colvec()
```
# All DSB colors
dsb_colvec()
# All DSB colors
dsb_colvec("DSB_Red")
# All DSB colors
dsb_style::dsb_colvec("DSB_Red")
library(dsb_style)
library(epinionDSB)
# All DSB colors
epinionDSB::dsb_colvec("DSB_Red")
# All DSB colors
epinionDSB::dsb_colvec("DSB_Red")
devtools::document()
library(tidyverse)
library(devtools)
library(usethis)
dsb_colvec <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dsb_cols)
dsb_cols[cols]
}
rm(dsb_colvec())
rm(dsb_colvec)
devtools::document()
library(tidyverse)
install_github("jvieroe/epinionDSB")
library(devtools)
install_github("jvieroe/epinionDSB")
install_github("jvieroe/epinionDSB")
devtools::document()
library(magrittr)
devtools::document()
library(devtools)
library(usethis)
devtools::document()
devtools::document()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style()
library(tidyverse)
library(magrittr)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
# All DSB colors
dsb_colvec("DSB_Red")
library(tidyverse)
library(epinionDSB)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
# All DSB colors
dsb_colvec("DSB_Red")
# All DSB colors
epinionDSB::dsb_colvec("DSB_Red")
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(epinionDSB)
epinionDSB::dsb_colvec()
# All DSB colors
dsb_colvec("DSB_Red")
dsb_colvec
dsb_colvec()
# ... a selection of colors
dsb_colvec("DSB_Red", "DSB_DarkGrey", "DSB_DarkGreen")
# ... a selection of colors
dsb_colvec("DSB_Red", "DSB_DarkGrey", "DSB_DarkGreen")
# ... all DSB colors
dsb_colvec("DSB_Red")
devtools::document()
devtools::document()
dsb_pal <- function(palette = "main",
reverse = FALSE, ...) {
pal <- drsimonj_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
dsb_pal()
load("C:/Users/jevi/Downloads/epi_palettes.rda")
View(epi_palettes)
devtools::document()
rm(dsb_pal)
devtools::document()
View(epi_palettes)
dsb_cols
library(epinionDSB)
library(devtools)
library(usethis)
library(tidyverse)
library(magrittr)
dsb_cols
library(epinionDSB)
dsb_cols
load("C:/Users/jevi/Downloads/epi_palettes (1).rda")
View(epi_palettes)
dsb_cols("DSB_Red")
dsb_colvec("DSB_Red")
dsb_colvec("DSB_Red")
dsb_palettes <- list(
`red`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
`full`  = dsb_colvec()
)
getwd()
# ----- Upload data to GitHub
usethis::use_data(dsb_palettes,
overwrite = TRUE)
devtools::document()
library(tidyverse)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
library(epinionDSB)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
theme(legend.position = "bottom")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
dsb_pal()
library(devtools)
install_github("jvieroe/epinionDSB")
library(tidyverse)
library(epinionDSB)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
dsb_pal()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
dsb_pal("main", reverse = TRUE)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
dsb_pal("two", reverse = TRUE)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
dsb_pal("two", reverse = TRUE)
devtools::document()
scale_color_dsb <- function(palette = "main",
discrete = TRUE,
reverse = FALSE,
...) {
pal <- drsimonj_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("dsb_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_fill_dsb <- function(palette = "main",
discrete = TRUE,
reverse = FALSE,
...) {
pal <- drsimonj_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("dsb_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
scale_color_dsb <- function(palette = "main",
discrete = TRUE,
reverse = FALSE,
...) {
pal <- dsb_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("dsb_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_fill_dsb <- function(palette = "main",
discrete = TRUE,
reverse = FALSE,
...) {
pal <- dsb_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("dsb_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
dsb_pal <- function(palette = "main",
reverse = FALSE,
...) {
pal <- dsb_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
scale_color_dsb <- function(palette = "main",
discrete = TRUE,
reverse = FALSE,
...) {
pal <- dsb_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("dsb_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
devtools::document()
rm(dsb_pal, scale_color_dsb, scale_fill_dsb)
devtools::document()
devtools::document()
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(epinionDSB)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(am))) +
geom_point(size = 3) +
facet_wrap(~ vs) +
dsb_style() +
scale_color_dsb()
dsb_pal()
dsb_pal()
dsb_palettes
devtools::document()
