"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
document()
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
# https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2
library(devtools)
document()
dsb_palettes <- list(
`one`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange", "DSB_Turqoise", "DSB_DarkGrey", "DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
#`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
#`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
usethis::use_data(dsb_palettes,
overwrite = TRUE)
#dsb_colvec()
document()
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
usethis::use_data(dsb_cols,
overwrite = TRUE)
document()
# ----- Upload data to GitHub
getwd()
library(usethis)
usethis::use_data(dsb_cols,
overwrite = TRUE)
document()
dsb_cols <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_cols$rgb
# ----- Get HEX codes, add to tibble
dsb_cols$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
View(dsb_cols)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
getwd()
usethis::use_data(dsb_cols,
overwrite = TRUE)
devtools::document()
load("C:/Users/jevi/Downloads/dsb_cols.rda")
rm(dsb_cols)
load("C:/Users/jevi/Downloads/dsb_cols.rda")
# This snippet defines a dataset of colors in the DSB Design Manual and provides their corresponding color codes in two formats
# RGB and HEX
# ----- Create a tibble based on the data in the DSB design manual
dsb_colors <- tibble::tibble(
name = c(
"DSB_Red",
"DSB_DarkBlue",
"DSB_LightBlue",
"DSB_Orange",
"DSB_LightGrey",
"DSB_Purple",
"DSB_Teal",
"DSB_Turqoise",
"DSB_DarkGrey",
"DSB_LightGreen",
"DSB_Green",
"DSB_DarkGreen"),
rgb = c(
"180 23 48",
"0 35 60",
"83 130 182",
"223 101 44",
"165 165 165",
"110 60 110",
"40 118 126",
"65 189 191",
"116 116 116",
"136 201 136",
"28 166 69",
"20 78 54"
))
# ----- Pull out RGB-codes
rgb_codes <- dsb_colors$rgb
# ----- Get HEX codes, add to tibble
dsb_colors$hex_codes <- sapply(strsplit(rgb_codes, " "), function(x)
rgb(x[1], x[2], x[3], maxColorValue=255))
# # ----- Upload data to GitHub
# usethis::use_data(dsb_colors,
#                   overwrite = TRUE)
# ----- Create named palette of HEX codes
# dsb_cols <- dsb_colors %>%
#   select(
#     c(name,
#       hex_codes)
#   ) %>%
#   tibble::deframe()
dsb_cols <- dsb_colors
rm(dsb_colors)
dsb_cols <- dsb_cols[, c(1,3)]
dsb_cols <- tibble::deframe(dsb_cols)
# ----- Upload data to GitHub
getwd()
save(dsb_cols,
file = "data/dsb_cols.rda")
dsb_palettes <- list(
`one`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange", "DSB_Turqoise", "DSB_DarkGrey", "DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
#`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
#`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
getwd()
dsb_colvec <- function(...) {
cols <- c(...)
if (is.null(cols))
return (dsb_cols)
dsb_cols[cols]
}
dsb_palettes <- list(
`one`  = dsb_colvec("DSB_Red"),
`two`  = dsb_colvec("DSB_Red", "DSB_DarkBlue"),
`three`   = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange"),
`main`  = dsb_colvec("DSB_Red", "DSB_Green", "DSB_Orange", "DSB_Turqoise", "DSB_DarkGrey", "DSB_Purple", "DSB_Teal", "DSB_DarkBlue"),
#`four` = dsb_colvec("DSB_Red", "DSB_DarkBlue", "DSB_Orange", "DSB_LightGrey"),
#`full`  = dsb_colvec(),
`reds`  = dsb_colvec("DSB_Orange", "DSB_Red"),
`blues`  = dsb_colvec("DSB_LightBlue", "DSB_DarkBlue"),
`greens`  = dsb_colvec("DSB_LightGreen", "DSB_Green", "DSB_DarkGreen"),
`teals`  = dsb_colvec("DSB_Turqoise", "DSB_Teal")
)
# ----- Upload data to GitHub
getwd()
# ----- Upload data to GitHub
getwd()
save(dsb_palettes,
file = "data/dsb_palettes.rda")
library(devtools)
document()
devtools::install_github("jvieroe/epinionDSB")
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb))
table(mtcars$carb2)
length(unique(mtcars$carb2))
length(unique(mtcars$carb))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
table(mtcars$cyl)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
dsb_palettes
dsb_palettes
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(cyl))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d(palette = "three")
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7,
alpha = 1) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
mtcars
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb2 = ifelse(car == "Volvo 142E",
12,
carb2))
table(mtcars$carb2)
length(unique(mtcars$carb2))
length(unique(mtcars$carb))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
table(mtcars$carb2)
length(unique(mtcars$carb2))
length(unique(mtcars$carb))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
table(mtcars$carb2)
length(unique(mtcars$carb2))
length(unique(mtcars$carb))
library(devtools)
devtools::install_github("jvieroe/epinionDSB")
library(tidyverse)
library(magrittr)
library(epinionDSB)
dsb_palettes
dsb_palettes$main
mtcars
ggplot(mtcars, aes(x = wt,
y = mpg)) +
geom_point(color = "#DF652C",
size = 7)
mtcars2 <- mtcars %>%
tibble::rownames_to_column("car") %>%
mutate(carb2 = ifelse(car == "Mazda RX4",
10,
carb)) %>%
mutate(carb3 = ifelse(car == "Volvo 142E",
12,
carb2))
table(mtcars2$carb2)
length(unique(mtcars2$carb2))
length(unique(mtcars2$carb))
length(dsb_palettes$main)
ggplot(mtcars, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb2))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
ggplot(mtcars2, aes(x = wt,
y = mpg,
color = factor(carb3))) +
geom_point(size = 7) +
facet_wrap(~ vs) +
dsb_style() +
color_dsb_d()
